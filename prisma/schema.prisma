// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["relationJoins"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model users {
  id                   String                 @id @default(ulid())
  email                String                 @unique
  name                 String
  emailVerified        Boolean
  image                String?
  role                 String?
  banned               Boolean?
  banReason            String?
  banExpires           Int?
  totalPoints          Float                  @default(0)
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  sessions             sessions[]
  accounts             accounts[]
  exerciseSetups       ExerciseSetup[]
  ExerciseLibraryVideo ExerciseLibraryVideo[]
  views                UserView[]
  ratings              UserRating[]
  reactions            UserReaction[]

  @@index([email])
  @@index([emailVerified])
  @@index([role])
  @@index([banned])
  @@index([banExpires])
  @@index([totalPoints])
  @@index([name])
}

model sessions {
  id             String   @id @default(ulid())
  expiresAt      DateTime
  token          String   @unique
  impersonatedBy String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  ipAddress      String?
  userAgent      String?
  userId         String
  user           users    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, token])
}

model accounts {
  id                    String    @id @default(ulid())
  accountId             String
  providerId            String
  userId                String
  user                  users     @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@index([userId])
}

model verifications {
  id         String    @id @default(ulid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@index([identifier])
}

model BodyPart {
  id              String            @id @default(ulid())
  name            String
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  exLibBodyParts  ExLibBodyPart[]
  ExSetupBodyPart ExSetupBodyPart[]
}

model Equipment {
  id                   String                @id @default(ulid())
  name                 String
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  exLibEquipments      ExLibEquipment[]
  demoCenterEquipments DemoCenterEquipment[]
  ExSetupEquipment     ExSetupEquipment[]
}

model Rack {
  id         String       @id @default(ulid())
  name       String
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  exLibRaks  ExLibRak[]
  ExSetupRak ExSetupRak[]
}

model ExerciseSetup {
  id           String    @id @default(ulid())
  title        String
  videoUrl     String
  height       Float
  userId       String
  user         users     @relation(fields: [userId], references: [id], onDelete: Cascade)
  isPublic     Boolean   @default(false)
  blocked      Boolean   @default(false)
  blockReason  String?
  playUrl      String?
  publishedAt  DateTime?
  // Pump by numbers fields
  isolatorHole String?
  yellow       String?
  green        String?
  blue         String?
  red          String?
  purple       String?
  orange       String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  contentStats     ContentStats[]
  views            UserView[]
  ratings          UserRating[]
  reactions        UserReaction[]
  ExSetupBodyPart  ExSetupBodyPart[]
  ExSetupEquipment ExSetupEquipment[]
  ExSetupRak       ExSetupRak[]

  @@index([userId])
  @@index([isPublic, blocked])
}

model ExSetupBodyPart {
  id         String        @id @default(ulid())
  exSetupId  String
  exSetup    ExerciseSetup @relation(fields: [exSetupId], references: [id], onDelete: Cascade)
  bodyPartId String
  bodyPart   BodyPart      @relation(fields: [bodyPartId], references: [id], onDelete: Cascade)
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
}

model ExSetupEquipment {
  id          String        @id @default(ulid())
  exSetupId   String
  exSetup     ExerciseSetup @relation(fields: [exSetupId], references: [id], onDelete: Cascade)
  equipmentId String
  equipment   Equipment     @relation(fields: [equipmentId], references: [id], onDelete: Cascade)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model ExSetupRak {
  id        String        @id @default(ulid())
  exSetupId String
  exSetup   ExerciseSetup @relation(fields: [exSetupId], references: [id], onDelete: Cascade)
  rackId    String
  rack      Rack          @relation(fields: [rackId], references: [id], onDelete: Cascade)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}

model DemoCenter {
  id                   String                @id @default(ulid())
  buildingType         String
  name                 String
  address              String
  contact              String
  cityZip              String
  lat                  Float?
  lng                  Float?
  bio                  String
  image                String
  availability         String?
  weekdays             String[]
  weekends             String[]
  weekdayOpen          String?
  weekdayClose         String?
  weekendOpen          String?
  weekendClose         String?
  isPublic             Boolean               @default(false)
  blocked              Boolean               @default(false)
  blockReason          String?
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  demoCenterEquipments DemoCenterEquipment[]

  @@index([isPublic, blocked])
  @@index([lat, lng])
  @@index([weekdays, weekends])
}

model DemoCenterEquipment {
  id           String     @id @default(ulid())
  demoCenterId String
  demoCenter   DemoCenter @relation(fields: [demoCenterId], references: [id], onDelete: Cascade)
  equipmentId  String
  equipment    Equipment  @relation(fields: [equipmentId], references: [id], onDelete: Cascade)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model ExerciseLibraryVideo {
  id             String           @id @default(ulid())
  title          String
  videoUrl       String
  playUrl        String?
  height         Float
  userId         String
  user           users            @relation(fields: [userId], references: [id], onDelete: Cascade)
  isPublic       Boolean          @default(false)
  blocked        Boolean          @default(false)
  blockReason    String?
  publishedAt    DateTime?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  contentStats   ContentStats[]
  views          UserView[]
  ratings        UserRating[]
  reactions      UserReaction[]
  ExLibBodyPart  ExLibBodyPart[]
  ExLibEquipment ExLibEquipment[]
  ExLibRak       ExLibRak[]

  @@index([userId])
  @@index([height])
  @@index([publishedAt])
  @@index([title])
  @@index([isPublic])
  @@index([blocked])
}

model ExLibBodyPart {
  id          String               @id @default(ulid())
  exLibraryId String
  exLibrary   ExerciseLibraryVideo @relation(fields: [exLibraryId], references: [id], onDelete: Cascade)
  bodyPartId  String
  bodyPart    BodyPart             @relation(fields: [bodyPartId], references: [id], onDelete: Cascade)
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
}

model ExLibEquipment {
  id          String               @id @default(ulid())
  exLibraryId String
  exLibrary   ExerciseLibraryVideo @relation(fields: [exLibraryId], references: [id], onDelete: Cascade)
  equipmentId String
  equipment   Equipment            @relation(fields: [equipmentId], references: [id], onDelete: Cascade)
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
}

model ExLibRak {
  id          String               @id @default(ulid())
  exLibraryId String
  exLibrary   ExerciseLibraryVideo @relation(fields: [exLibraryId], references: [id], onDelete: Cascade)
  rackId      String
  rack        Rack                 @relation(fields: [rackId], references: [id], onDelete: Cascade)
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
}

model ContentStats {
  id            String                @id @default(ulid())
  exerciseId    String?
  exercise      ExerciseSetup?        @relation(fields: [exerciseId], references: [id], onDelete: Cascade)
  libraryId     String?
  library       ExerciseLibraryVideo? @relation(fields: [libraryId], references: [id], onDelete: Cascade)
  totalViews    Int                   @default(0)
  totalLikes    Int                   @default(0)
  totalDislikes Int                   @default(0)
  avgRating     Float                 @default(0.0)
  updatedAt     DateTime              @updatedAt

  @@index([exerciseId, libraryId])
  @@map("content_stats")
}

enum RewardType {
  LIKE
  VIEW
  RATING
  UPLOAD_EXERCISE
  UPLOAD_LIBRARY
  DISLIKE
  DEMO_CENTER
}

model RewardPoints {
  id          String     @id @default(ulid())
  points      Int        @default(0)
  name        String?
  isActive    Boolean    @default(true)
  type        RewardType @default(LIKE)
  icon        String?
  description String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@index([isActive])
  @@index([type])
  @@map("reward_points")
}

model UserView {
  id     String  @id @default(ulid())
  userId String?
  user   users?  @relation(fields: [userId], references: [id], onDelete: SetNull)

  exerciseId String?
  exercise   ExerciseSetup? @relation(fields: [exerciseId], references: [id], onDelete: SetNull)

  libraryId String?
  library   ExerciseLibraryVideo? @relation(fields: [libraryId], references: [id], onDelete: SetNull)
  viewedAt  DateTime              @default(now())
  sessionId String?
  ipAddress String?
  userAgent String?

  @@index([userId, exerciseId, libraryId])
  @@index([sessionId])
  @@index([ipAddress])
  @@map("views")
}

model UserRating {
  id     String @id @default(ulid())
  userId String
  user   users  @relation(fields: [userId], references: [id], onDelete: Cascade)

  exerciseId String?
  exercise   ExerciseSetup? @relation(fields: [exerciseId], references: [id], onDelete: SetNull)

  libraryId String?
  library   ExerciseLibraryVideo? @relation(fields: [libraryId], references: [id], onDelete: SetNull)
  rating    Int // Validate 1–5 in service/DTO layer

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, exerciseId, libraryId])
  @@index([userId, exerciseId, libraryId])
  @@map("ratings")
}

enum ReactionType {
  LIKE
  DISLIKE
}

model UserReaction {
  id     String @id @default(ulid())
  userId String
  user   users  @relation(fields: [userId], references: [id], onDelete: Cascade)

  reaction ReactionType

  exerciseId String?
  exercise   ExerciseSetup? @relation(fields: [exerciseId], references: [id], onDelete: SetNull)

  libraryId String?
  library   ExerciseLibraryVideo? @relation(fields: [libraryId], references: [id], onDelete: SetNull)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // One reaction per user per content
  @@unique([userId, exerciseId])
  @@unique([userId, libraryId])
  @@map("reactions")
}

model Feedback {
  id        String   @id @default(ulid())
  fullName  String
  email     String
  phone     String?
  message   String
  createdAt DateTime @default(now())

  @@index([email])
  @@index([createdAt])
  @@map("feedback")
}
